// <auto-generated />
using System;
using FastFoodResturant.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FastFoodResturant.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FastFoodResturant.Models.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CategoryDescription");

                    b.Property<byte[]>("CategoryImage")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("CategoryImage");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CategoryName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsAvailable");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryId", "IsAvailable")
                        .IsUnique();

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("FastFoodResturant.Models.FoodMaster", b =>
                {
                    b.Property<long>("FoodMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("FoodMasterId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FoodMasterId"));

                    b.Property<double?>("Calories")
                        .HasColumnType("float")
                        .HasColumnName("Calories");

                    b.Property<double?>("Carbohydrates")
                        .HasColumnType("float")
                        .HasColumnName("Carbohydrates");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("CategoryId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<double?>("Fat")
                        .HasColumnType("float")
                        .HasColumnName("Fat");

                    b.Property<double?>("Fiber")
                        .HasColumnType("float")
                        .HasColumnName("Fiber");

                    b.Property<string>("FoodDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("FoodDescription");

                    b.Property<byte[]>("FoodImage")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("FoodImage");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FoodName");

                    b.Property<decimal>("FoodPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("FoodPrice");

                    b.Property<string>("FoodType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FoodType");

                    b.Property<long>("GSTId")
                        .HasColumnType("bigint")
                        .HasColumnName("GSTId");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsAvailable");

                    b.Property<bool>("IsGlutenFree")
                        .HasColumnType("bit")
                        .HasColumnName("IsGlutenFree");

                    b.Property<bool>("IsSpicy")
                        .HasColumnType("bit")
                        .HasColumnName("IsSpicy");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit")
                        .HasColumnName("IsVegan");

                    b.Property<string>("PreparationTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PreparationTime");

                    b.Property<double?>("Protein")
                        .HasColumnType("float")
                        .HasColumnName("Protein");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("FoodMasterId");

                    b.HasIndex("CategoryId", "IsAvailable")
                        .IsUnique();

                    b.HasIndex("FoodMasterId", "IsAvailable")
                        .IsUnique();

                    b.HasIndex("GSTId", "IsAvailable")
                        .IsUnique();

                    b.ToTable("food_master", (string)null);
                });

            modelBuilder.Entity("FastFoodResturant.Models.GSTMaster", b =>
                {
                    b.Property<long>("GSTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("GSTId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GSTId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("GSTName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("GSTName");

                    b.Property<decimal?>("GSTPercentage")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("GSTPercentage");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsAvailable");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("GSTId");

                    b.HasIndex("GSTId", "IsAvailable")
                        .IsUnique();

                    b.ToTable("gst_master", (string)null);
                });

            modelBuilder.Entity("FastFoodResturant.Models.ProductMaster", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ProductId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<long>("GSTId")
                        .HasColumnType("bigint")
                        .HasColumnName("GSTId");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsAvailable");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("ProductDescription");

                    b.Property<byte[]>("ProductImage")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ProductImage");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ProductPrice");

                    b.Property<long>("StockId")
                        .HasColumnType("bigint")
                        .HasColumnName("StockId");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint")
                        .HasColumnName("UnitId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("ProductId");

                    b.HasIndex("GSTId", "IsAvailable")
                        .IsUnique();

                    b.HasIndex("ProductId", "IsAvailable")
                        .IsUnique();

                    b.HasIndex("StockId", "IsAvailable")
                        .IsUnique();

                    b.HasIndex("UnitId", "IsAvailable")
                        .IsUnique();

                    b.ToTable("product_master", (string)null);
                });

            modelBuilder.Entity("FastFoodResturant.Models.ProductStock", b =>
                {
                    b.Property<long>("ProductStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ProductStockId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductStockId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsAvailable");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("ProductId");

                    b.Property<decimal>("StockQuantity")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("StockQuantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("ProductStockId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("ProductId", "IsAvailable")
                        .IsUnique();

                    b.HasIndex("ProductStockId", "IsAvailable")
                        .IsUnique();

                    b.ToTable("product_stock", (string)null);
                });

            modelBuilder.Entity("FastFoodResturant.Models.PurchaseProductDetails", b =>
                {
                    b.Property<long>("ProductPurchaseDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ProductPurchaseDetailsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductPurchaseDetailsId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsAvailable");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("ItemId");

                    b.Property<decimal>("ItemQuantity")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ItemQuantity");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("NetAmount");

                    b.Property<decimal>("PerItemMRP")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PerItemMRP");

                    b.Property<decimal>("PerItemTradeValue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PerItemTradeValue");

                    b.Property<long>("ProductPurchaseMasterId")
                        .HasColumnType("bigint")
                        .HasColumnName("ProductPurchaseMasterId");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("TaxAmount");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("ProductPurchaseDetailsId");

                    b.HasIndex("ItemId", "IsAvailable")
                        .IsUnique();

                    b.HasIndex("ProductPurchaseDetailsId", "IsAvailable")
                        .IsUnique();

                    b.HasIndex("ProductPurchaseMasterId", "IsAvailable")
                        .IsUnique();

                    b.ToTable("purchase_product_details", (string)null);
                });

            modelBuilder.Entity("FastFoodResturant.Models.PurchaseProductMaster", b =>
                {
                    b.Property<long>("ProductPurchaseMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ProductPurchaseMasterId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductPurchaseMasterId"));

                    b.Property<decimal>("AdjustAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AdjustAmount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("DiscountAmount");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsAvailable");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasColumnName("IsPaid");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("NetAmount");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PaidAmount");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("SupplierId");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("TaxAmount");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("ProductPurchaseMasterId");

                    b.HasIndex("ProductPurchaseMasterId", "IsAvailable")
                        .IsUnique();

                    b.HasIndex("SupplierId", "IsAvailable")
                        .IsUnique();

                    b.ToTable("purchase_product_master", (string)null);
                });

            modelBuilder.Entity("FastFoodResturant.Models.SupplierMaster", b =>
                {
                    b.Property<long>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SupplierId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SupplierId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsAvailable");

                    b.Property<string>("SupplierAddress")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("SupplierAddress");

                    b.Property<string>("SupplierEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SupplierEmail");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SupplierName");

                    b.Property<string>("SupplierPhone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SupplierPhone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("SupplierId");

                    b.HasIndex("SupplierId", "IsAvailable")
                        .IsUnique();

                    b.ToTable("supplier_master", (string)null);
                });

            modelBuilder.Entity("FastFoodResturant.Models.TableMaster", b =>
                {
                    b.Property<long>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TableId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TableId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("Capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("FloorType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FloorType");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsAvailable");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit")
                        .HasColumnName("IsOccupied");

                    b.Property<bool>("IsOutSide")
                        .HasColumnType("bit")
                        .HasColumnName("IsOutSide");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TableName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("TableId");

                    b.HasIndex("TableId", "IsAvailable")
                        .IsUnique();

                    b.ToTable("table_master", (string)null);
                });

            modelBuilder.Entity("FastFoodResturant.Models.ToppingsMaster", b =>
                {
                    b.Property<long>("ToppingsMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ToppingsMasterId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ToppingsMasterId"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("CategoryId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<long>("FoodMasterId")
                        .HasColumnType("bigint")
                        .HasColumnName("FoodMasterId");

                    b.Property<long>("GSTId")
                        .HasColumnType("bigint")
                        .HasColumnName("GSTId");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsAvailable");

                    b.Property<bool>("IsGlutenFree")
                        .HasColumnType("bit")
                        .HasColumnName("IsGlutenFree");

                    b.Property<bool>("IsSpicy")
                        .HasColumnType("bit")
                        .HasColumnName("IsSpicy");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit")
                        .HasColumnName("IsVegan");

                    b.Property<string>("ToppingsDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("ToppingsDescription");

                    b.Property<byte[]>("ToppingsImage")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ToppingsImage");

                    b.Property<string>("ToppingsName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ToppingsName");

                    b.Property<decimal>("ToppingsPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ToppingsPrice");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("ToppingsMasterId");

                    b.HasIndex("CategoryId", "IsAvailable")
                        .IsUnique();

                    b.HasIndex("FoodMasterId", "IsAvailable")
                        .IsUnique();

                    b.HasIndex("GSTId", "IsAvailable")
                        .IsUnique();

                    b.HasIndex("ToppingsMasterId", "IsAvailable")
                        .IsUnique();

                    b.ToTable("toppings_master", (string)null);
                });

            modelBuilder.Entity("FastFoodResturant.Models.UnitMaster", b =>
                {
                    b.Property<long>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("UnitId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UnitId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsAvailable");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("UnitName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("UnitId");

                    b.HasIndex("UnitId", "IsAvailable")
                        .IsUnique();

                    b.ToTable("unit_master", (string)null);
                });

            modelBuilder.Entity("FastFoodResturant.Models.FoodMaster", b =>
                {
                    b.HasOne("FastFoodResturant.Models.Category", "Category")
                        .WithMany("FoodMaster")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FoodMaster_Category");

                    b.HasOne("FastFoodResturant.Models.GSTMaster", "GSTMaster")
                        .WithMany("FoodMaster")
                        .HasForeignKey("GSTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FoodMaster_GSTMaster");

                    b.Navigation("Category");

                    b.Navigation("GSTMaster");
                });

            modelBuilder.Entity("FastFoodResturant.Models.ProductMaster", b =>
                {
                    b.HasOne("FastFoodResturant.Models.GSTMaster", "GSTMaster")
                        .WithMany("ProductMaster")
                        .HasForeignKey("GSTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductMaster_GSTMaster");

                    b.HasOne("FastFoodResturant.Models.UnitMaster", "UnitMaster")
                        .WithMany("ProductMaster")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductMaster_UnitMaster");

                    b.Navigation("GSTMaster");

                    b.Navigation("UnitMaster");
                });

            modelBuilder.Entity("FastFoodResturant.Models.ProductStock", b =>
                {
                    b.HasOne("FastFoodResturant.Models.ProductMaster", "ProductMaster")
                        .WithOne("ProductStock")
                        .HasForeignKey("FastFoodResturant.Models.ProductStock", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProductStock_ProductMaster");

                    b.Navigation("ProductMaster");
                });

            modelBuilder.Entity("FastFoodResturant.Models.PurchaseProductDetails", b =>
                {
                    b.HasOne("FastFoodResturant.Models.ProductMaster", "ProductMaster")
                        .WithMany("PurchaseProductDetails")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseProductDetails_ProductMaster");

                    b.HasOne("FastFoodResturant.Models.PurchaseProductMaster", "PurchaseProductMaster")
                        .WithMany("PurchaseProductDetails")
                        .HasForeignKey("ProductPurchaseMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseProductDetails_PurchaseProductMaster");

                    b.Navigation("ProductMaster");

                    b.Navigation("PurchaseProductMaster");
                });

            modelBuilder.Entity("FastFoodResturant.Models.PurchaseProductMaster", b =>
                {
                    b.HasOne("FastFoodResturant.Models.SupplierMaster", "SupplierMaster")
                        .WithMany("PurchaseProductMaster")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseProductMaster_SupplierMaster");

                    b.Navigation("SupplierMaster");
                });

            modelBuilder.Entity("FastFoodResturant.Models.ToppingsMaster", b =>
                {
                    b.HasOne("FastFoodResturant.Models.Category", "Category")
                        .WithMany("ToppingsMaster")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ToppingsMaster_Category");

                    b.HasOne("FastFoodResturant.Models.FoodMaster", "FoodMaster")
                        .WithMany("ToppingsMaster")
                        .HasForeignKey("FoodMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ToppingsMaster_FoodMaster");

                    b.HasOne("FastFoodResturant.Models.GSTMaster", "GSTMaster")
                        .WithMany("ToppingsMaster")
                        .HasForeignKey("GSTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ToppingsMaster_GSTMaster");

                    b.Navigation("Category");

                    b.Navigation("FoodMaster");

                    b.Navigation("GSTMaster");
                });

            modelBuilder.Entity("FastFoodResturant.Models.Category", b =>
                {
                    b.Navigation("FoodMaster");

                    b.Navigation("ToppingsMaster");
                });

            modelBuilder.Entity("FastFoodResturant.Models.FoodMaster", b =>
                {
                    b.Navigation("ToppingsMaster");
                });

            modelBuilder.Entity("FastFoodResturant.Models.GSTMaster", b =>
                {
                    b.Navigation("FoodMaster");

                    b.Navigation("ProductMaster");

                    b.Navigation("ToppingsMaster");
                });

            modelBuilder.Entity("FastFoodResturant.Models.ProductMaster", b =>
                {
                    b.Navigation("ProductStock");

                    b.Navigation("PurchaseProductDetails");
                });

            modelBuilder.Entity("FastFoodResturant.Models.PurchaseProductMaster", b =>
                {
                    b.Navigation("PurchaseProductDetails");
                });

            modelBuilder.Entity("FastFoodResturant.Models.SupplierMaster", b =>
                {
                    b.Navigation("PurchaseProductMaster");
                });

            modelBuilder.Entity("FastFoodResturant.Models.UnitMaster", b =>
                {
                    b.Navigation("ProductMaster");
                });
#pragma warning restore 612, 618
        }
    }
}
